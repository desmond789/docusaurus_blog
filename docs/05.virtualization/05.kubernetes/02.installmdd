---
title: 2.K8S安装
---
## 集群类型

kubernetes集群大体上分为两类：一主多从和多主多从。

* **一主多从：**一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境
* **多主多从：**多台Master节点和多台Node节点，搭建麻烦，安全性高，适合用于生产环境

![1707137167989](images/1707137167989.png)

> 说明：
>
> 为了测试简单，本次搭建的是  一主多从   类型的集群

## kubernetes 安装

目前生产部署 Kubernetes 集群主要有两种方式：

### kubeadm

Kubeadm是一个Kubernetes集群的初始化工具，它能够简化集群的创建和管理过程。下面是使用kubeadm搭建Kubernetes集群的详细步骤：

### 二进制包

从 github 下载发行版的二进制包，手动部署每个组件，组成Kubernetes 集群。

## kubeadm 安装

### 安装要求

在开始之前，部署 Kubernetes 集群机器需要满足以下几个条件：

当前实验环境：1台master，3台node

* Master：

  * 操作系统 Rockylinux 9.2
  * 硬件配置：8GB  RAM，2 个 CPU ，硬盘 50GB
  * ip：192.168.123.163
* Node3台：

  * 操作系统 Rockylinux 9.2
  * 硬件配置：4GB  RAM，1 个 CPU ，硬盘 50GB
  * ip分别是：192.168.123.161，192.168.123.162，192.168.123.164

所有节点需要可以访问外网，拉取镜像，禁止 swap 分区，集群中所有机器之间网络互通。

| 角色       | IP              | 主机名   | 操作系统       | 配置                           |
| ---------- | --------------- | -------- | -------------- | ------------------------------ |
| k8s-master | 192.168.123.161 | CA-S2107 | Rockylinux 9.2 | 8GB  RAM，2 个 CPU ，硬盘 50GB |
| k8s-node1  | 192.168.123.162 | CA-S2108 | Rockylinux 9.2 | 4GB  RAM，1 个 CPU ，硬盘 50GB |
| k8s-node2  | 192.168.123.163 | CA-S2109 | Rockylinux 9.2 | 4GB  RAM，1 个 CPU ，硬盘 50GB |
| k8s-node3  | 192.168.123.164 | CA-S2110 | Rockylinux 9.2 | 4GB  RAM，1 个 CPU ，硬盘 50GB |

#### 软件版本

docker（18.06.3），kubeadm（1.17.4）、kubelet（1.17.4）、kubectl（1.17.4）程序。

#### 最终目标

1. 在所有节点上安装 Docker 和 kubeadm
2. 部署 Kubernetes Master
3. 部署容器网络插件
4. 部署 Kubernetes Node，将节点加入 Kubernetes 集群中
5. 部署 Dashboard Web 页面，可视化查看 Kubernetes 资源

![1707126589591](images/1707126589591.png)

### 系统初始化

#### 关闭防火墙

```
systemctl stop firewalld && systemctl disable firewalld
```

#### 关闭 selinux

```
sed -i 's/enforcing/disabled/' /etc/selinux/config 	# 永久
setenforce 0 						# 临时
```

#### 关闭 swap

```
swapoff -a 	# 临时
vim /etc/fstab 	# 永久，注释带有swap的行
```

#### 主机名

在DNS服务器上设置主机名和IP解析，无法操作DNS服务器的话，可以在每台主机上添加所有实验主机的主机名和IP。类似如下操作：

```
cat >> /etc/hosts << EOF
192.168.123.163 k8s-master		#将IP和主机名更改成自己
192.168.123.161 k8s-node1
192.168.123.162 k8s-node2
192.168.123.162 k8s-node2
EOF
```

每台主机上都要操作。

#### 将桥接的 IPv4 流量传递到 iptables 的链

```
cat > /etc/sysctl.d/k8s.conf << EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system # 生效
```

#### 配置ipvs功能

在kubernetes中service有两种代理模型，一种是基于iptables的，一种是基于ipvs的。

两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块。

```
# 1 安装ipset和ipvsadm
dnf install ipset ipvsadm -y

#安装内核模块，不然会报错
sudo dnf install kernel-modules-extra

# 2 添加需要加载的模块写入脚本文件
cat <<EOF >  /etc/sysconfig/modules/ipvs.modules
#!/bin/bash
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
EOF

# 3 为脚本文件添加执行权限
chmod +x /etc/sysconfig/modules/ipvs.modules

# 4 执行脚本文件
/bin/bash /etc/sysconfig/modules/ipvs.modules

# 5 查看对应的模块是否加载成功
[root@master ~]# lsmod | grep -e ip_vs -e nf_conntrack_ipv4
```

#### 时间同步

```
yum install ntpdate -y
ntpdate time.windows.com
```

### 所有节点安装 Docker/kubeadm/kubelet

#### 安装Docker

复制以下内容install_docker.sh，并运行

```
#!/bin/bash

#setup repo of docker
install_repo(){
    location_status=1  # 0:china source !0:office source
    yum install -y yum-utils
    if [ $location_status -eq 0 ];then
        yum-config-manager \
        --add-repo \
        http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    else
        yum-config-manager \
		--add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo
    fi
    yum makecache fast
}
#install docker
install_docker(){
    yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    systemctl start docker && systemctl enable docker
}

#check_install_status
check_docker(){
    docker version
    echo "================================="
    if [ $? -eq 0 ];then
        echo "docker already installed"
    else
        echo "docker not installed"
    fi
    echo "================================="
}
#set up aliyun image accelerator
setup_aliyun(){
if [ $location_status -eq 0 ];then
tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://1o70ffe58r.mirror.aliyuncs.com"]
}
EOF
fi
systemctl daemon-reload
systemctl restart docker
}

install_repo
install_docker
setup_aliyun
check_docker
```

也可以直接运行以下命令安装docker：

```
url https://blog.badhydra.com/upload/install_docker.sh | bash
```

##### 添加阿里云 软件源

添加docker镜像加速源我用的是官方的源，阿里云的源可以自行上网查找。

### 安装kubadmin, kubelet 和 kubectl

添加k8s源，用的是官方的源

```
# 这会覆盖 /etc/yum.repos.d/kubernetes.repo 中现存的所有配置
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
EOF
```

安装

```
sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
sudo systemctl enable --now kubelet

# 设置kubelet开机自启
systemctl enable kubelet
```

kubelet 现在每隔几秒就会重启，因为它陷入了一个等待 kubeadm 指令的死循环。

### 配置 cgroup 驱动程序

容器运行时和 kubelet 都具有名字为 "cgroup driver" 的属性，该属性对于在 Linux 机器上管理 CGroups 而言非常重要。

#### 配置 kubelet 的 cgroup 驱动

kubeadm 支持在执行 `kubeadm init` 时，传递一个 `KubeletConfiguration` 结构体。 `KubeletConfiguration` 包含 `cgroupDriver` 字段，可用于控制 kubelet 的 cgroup 驱动。

```
# 配置kubelet的cgroup
# 编辑/etc/sysconfig/kubelet，添加下面的配置
KUBELET_CGROUP_ARGS="--cgroup-driver=systemd"
KUBE_PROXY_MODE="ipvs"
```

### 准备集群镜像

```
# 在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看
kubeadm config images list
#显示结果如下：
registry.k8s.io/kube-apiserver:v1.29.1
registry.k8s.io/kube-controller-manager:v1.29.1
registry.k8s.io/kube-scheduler:v1.29.1
registry.k8s.io/kube-proxy:v1.29.1
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
registry.k8s.io/etcd:3.5.10-0


# 下载镜像
#把上面的镜像pull下来
kubeadm config images list | xargs -n 1 docker pull

#如果没有外网，使用以下方法
# 此镜像在kubernetes的仓库中,由于网络原因,无法连接，下面提供了一种替代方案
images=(
registry.k8s.io/kube-apiserver:v1.29.1
registry.k8s.io/kube-controller-manager:v1.29.1
registry.k8s.io/kube-scheduler:v1.29.1
registry.k8s.io/kube-proxy:v1.29.1
registry.k8s.io/coredns/coredns:v1.11.1
registry.k8s.io/pause:3.9
registry.k8s.io/etcd:3.5.10-0
)
for imageName in ${images[@]} ; do
	docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName
	docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName 		k8s.gcr.io/$imageName
	docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName
done
```

### 集群初始化

下面开始对集群进行初始化，并将node节点加入到集群中

> 下面的操作只需要在 `master`节点上执行即可

```
# 创建集群
kubeadm init \
	--kubernetes-version=v1.29.1 \
    --pod-network-cidr=10.244.0.0/16 \
    --service-cidr=10.96.0.0/12 \
    --apiserver-advertise-address=192.168.123.163

# 创建必要文件
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```









## Reference Links：

#The Kubernetes 作者 | 文档发布基于 CC BY 4.0 授权许可

https://kubernetes.io/

#尚硅谷笔记

https://www.yuque.com/leifengyang/oncloud/ghnb83

#其他网友笔记

https://juejin.cn/post/7238519458625273917
